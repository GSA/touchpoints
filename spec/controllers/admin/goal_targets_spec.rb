# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe Admin::GoalTargetsController, type: :controller do
  let(:admin) { FactoryBot.create(:user, :admin) }

  let(:organization) do
    admin.organization
  end

  let!(:goal) do
    FactoryBot.create(:goal, organization:)
  end

  # GoalTarget. As you add validations to GoalTarget, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      goal_id: goal.id,
      assertion: 'assertion text',
    }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  let(:valid_session) { {} }

  before do
    sign_in(admin)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      GoalTarget.create! valid_attributes
      get :index, params: { goal_id: goal.id }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      goal_target = GoalTarget.create! valid_attributes
      get :show, params: { goal_id: goal.id, id: goal_target.id }
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get :new, params: { goal_id: goal.id }
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      goal_target = GoalTarget.create! valid_attributes
      get :edit, params: { goal_id: goal.id, id: goal_target.id }
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new GoalTarget' do
        expect do
          post :create, params: { goal_id: goal.id, goal_target: valid_attributes }
        end.to change(GoalTarget, :count).by(1)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new GoalTarget' do
        expect do
          post :create, params: { goal_target: invalid_attributes }
        end.to change(GoalTarget, :count).by(0)
      end
    end
  end

  describe 'PATCH /update' do
    let(:new_attributes) do
      {
        name: 'Updated name',
      }
    end

    context 'with valid parameters' do
      it 'updates the goal_target' do
        goal_target = GoalTarget.create! valid_attributes
        put :update, params: { goal_id: goal.id, id: goal_target.to_param, goal_target: new_attributes }, session: valid_session
        expect(response).to redirect_to(admin_goal_goal_target_path(goal, goal_target))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        goal_target = GoalTarget.create! valid_attributes
        put :update, params: { goal_id: goal.id, id: goal_target.id, goal_target: { assertion: nil } }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested goal_target' do
      goal_target = GoalTarget.create! valid_attributes
      expect do
        delete :destroy, params: { goal_id: goal.id, id: goal_target.id }
      end.to change(GoalTarget, :count).by(-1)
    end

    it 'redirects to the goal_targets list' do
      goal_target = GoalTarget.create! valid_attributes
      delete :destroy, params: { goal_id: goal.id, id: goal_target.id }
      expect(response).to redirect_to(admin_goal_goal_targets_url(goal))
    end
  end
end
