# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Admin::UsersController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    # skip("Add a hash of attributes valid for your model")
    {
      email: 'james.madison@example.gov',
      password: 'password',
      password_confirmation: 'password',
    }
  end

  let(:invalid_attributes) do
    {
      email: nil,
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let!(:example_organization) { FactoryBot.create(:organization, domain: 'example.gov') }
  let(:organization) { FactoryBot.create(:organization) }
  let(:admin) { FactoryBot.create(:user, :admin, organization:) }

  before do
    sign_in(admin)
  end

  describe 'GET #index' do
    it 'returns a success response' do
      User.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      user = User.create! valid_attributes
      get :show, params: { id: user.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      user = User.create! valid_attributes
      get :edit, params: { id: user.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new User' do
        expect do
          post :create, params: { user: valid_attributes }, session: valid_session
        end.to change(User, :count).by(1)
      end

      it 'redirects to the created user' do
        post :create, params: { user: valid_attributes }, session: valid_session
        expect(response).to redirect_to(admin_user_path(User.last))
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { user: invalid_attributes }, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested user' do
        user = User.create! valid_attributes
        put :update, params: { id: user.to_param, user: new_attributes }, session: valid_session
        user.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the user' do
        user = User.create! valid_attributes
        put :update, params: { id: user.to_param, user: valid_attributes }, session: valid_session
        expect(response).to redirect_to(admin_user_path)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        user = User.create! valid_attributes
        put :update, params: { id: user.to_param, user: invalid_attributes }, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested user' do
      user = User.create! valid_attributes
      expect do
        delete :destroy, params: { id: user.to_param }, session: valid_session
      end.to change(User, :count).by(-1)
    end

    it 'redirects to the users list' do
      user = User.create! valid_attributes
      delete :destroy, params: { id: user.to_param }, session: valid_session
      expect(response).to redirect_to(admin_users_url)
    end
  end

  describe 'GET #deactivate' do
    it 'returns a 403 Unauthorized response' do
      get :deactivate, params: {}, session: valid_session
      expect(response.body).to include('Request must come from valid login.gov source')
    end

    it 'returns a success response' do
      u = User.new({ email: 'testdeactivate@example.gov', uid: '127608c1-55ff-476d-8b5a-8e3cab524bdc' })
      u.save
      rsa_private = OpenSSL::PKey::RSA.generate 2048
      ENV['LOGIN_GOV_PUBLIC_KEY'] = rsa_private.public_key.to_s
      jwt_data = {
        iss: 'nov',
        exp: 1.week.from_now,
        nbf: Time.zone.now,
        events: {
          'https://schemas.openid.net/secevent/risc/event-type/account-purged': {
            subject: {
              'subject-type': 'iss-sub',
              iss: 'issuer',
              sub: '127608c1-55ff-476d-8b5a-8e3cab524bdc',
            },
          },
        },
      }
      jws = JSON::JWT.new(jwt_data).sign(rsa_private, :RS256)
      jws.to_s

      headers = { 'HTTP_AUTHORIZATION' => "WebPush #{jws}" }
      request.headers.merge! headers
      get :deactivate, params: {}, session: valid_session
      u.reload
      expect(response).to be_successful
      expect(response.body).to include('successfully deactivated')
      expect(u.inactive).to eq(true)
      u.destroy
    end
  end
end
