# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe Admin::CollectionsController, type: :controller do
  let(:organization) { FactoryBot.create(:organization) }
  let(:service_provider) { FactoryBot.create(:service_provider, organization:) }
  let(:another_organization) { FactoryBot.create(:organization, :another) }
  let(:admin) { FactoryBot.create(:user, :admin, organization:) }
  let(:user) { FactoryBot.create(:user, organization: another_organization) }

  let(:valid_session) { {} }

  let(:valid_attributes) do
    FactoryBot.build(:collection, organization:, user: admin, service_provider:).attributes
  end

  let(:invalid_attributes) do
    {
      name: 'Only',
      organization_id: nil,
      user_id: nil,
    }
  end

  context 'as an User' do
    let(:user2) { FactoryBot.create(:user, organization: another_organization) }

    before do
      sign_in(user)
    end

    describe 'GET /show' do
      let(:collection) { FactoryBot.create(:collection, organization: another_organization, user: user2, service_provider:) }

      it 'renders a successful response' do
        get :index, params: {}, session: valid_session
        expect(response).to be_successful
      end
    end

    context 'for a Collection from another organization' do
      describe 'GET /show' do
        let!(:collection) { FactoryBot.create(:collection, organization:, user: admin, service_provider:) }

        it 'renders RecordNotFound' do
          expect do
            get :show, params: { id: collection.id }, session: valid_session
          end.to raise_error(ActiveRecord::RecordNotFound)
        end
      end
    end
  end
end
