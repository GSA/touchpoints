// All form components are namespaced under 'fba' = 'Feedback Analytics'

(function ( d, N ) { 'use strict';
N.fba = {
	css: '<%= escape_javascript File.open("app/assets/stylesheets/widget/widget.css").read %>',

	init: function( options )
	{
		this.options = options;
		this.loadCss();
		this.loadHtml();
		this.loadButton();
		this.bindEventListeners();
		this.dialogOpen = false;
	},
	bindEventListeners: function()
	{
		var self = this;
		d.addEventListener('keyup', function (event) {
			var x = event.keyCode;
			if( x == 27 && self.dialogOpen == true){
				self.closeDialog();
			}});
			d.addEventListener('click', function (event) {
				self.handleClick(event);
			});
		},
		loadCss: function()
		{
			d.head.innerHTML += '<style>' + this.css + '</style>';
		},
		loadHtml: function()		{
			this.buttonEl = document.createElement('a');
			this.buttonEl.setAttribute('id', 'fba-button');
			this.buttonEl.setAttribute('href', '#');
			this.buttonEl.innerHTML = this.options.open;

			this.overlayEl = document.createElement('div');
			this.overlayEl.setAttribute('id', 'fba-overlay');

			this.dialogEl = document.createElement('div');
			this.dialogEl.setAttribute('id', 'fba-modal');
			this.dialogEl.setAttribute('role', 'dialog');

			// Here lies our form interface
			this.dialogEl.innerHTML = '<%= escape_javascript render(partial: "components/widget/modal") %>';
		},
		handleClick: function(e) {
			if (N.fba.dialogOpen && !e.target.closest('#fba-button') && !e.target.closest('#fba-modal-dialog')) {
				N.fba.closeDialog();
			}
		},
		handleButtonClick: function(e) {
			e.preventDefault();
			N.fba.loadDialog();
		},
		handleDialogClose: function(e) {
			e.preventDefault();
			N.fba.closeDialog();
		},
		handleSubmitClick: function(e) {
			e.preventDefault();
			N.fba.sendFeedback();
		},
		loadButton: function()
		{
			d.body.appendChild(this.buttonEl);
			d.getElementById('fba-button').addEventListener( 'click', this.handleButtonClick, false );
		},
		loadDialog: function()
		{
			d.getElementById('fba-button').removeEventListener('click', this.handleButtonClick, false );
			d.body.removeChild( d.getElementById('fba-button') );
			d.body.appendChild(this.dialogEl);
			d.getElementById('fba-modal-close').addEventListener( 'click', this.handleDialogClose, false );
			d.getElementById('fba-submit').addEventListener( 'click', this.handleSubmitClick, false );
			this.dialogOpen = true;
		},
		closeDialog: function()
		{
			d.getElementById('fba-modal-close').removeEventListener('keypress', this.handleDialogClose, false );
			d.getElementById('fba-modal-close').removeEventListener('click', this.handleDialogClose, false );
			d.getElementById('fba-submit').removeEventListener('click', this.handleSubmitClick, false );
			d.body.removeChild( d.getElementById('fba-modal') );
			this.loadButton();
			this.dialogOpen = false;
		},
		sendFeedback: function()
		{
			var form = document.getElementById("touchpoints-form");
			this.ajaxPost(form, this.formSuccess);
		},
		formSuccess: function(e)
		{
			var alertElement = document.querySelector("#fba-alert");
			alertElement.innerHTML = ""; // Clear the alert box

			// alert( this.options.thankyou ); // Customizable thank you
			if (this.readyState === 4) {
		      if (this.status === 201) { // SUCCESS!
						alertElement.innerHTML += "Success! Form submitted successfully. Thank you for your Feedback.";
		      } else if (this.status === 200) { // FIXME: this `if` should not be necessary. Response should be a 201 (HTTP CREATED status)
						alertElement.innerHTML += "Success! Form submitted successfully. Thank you for your Feedback.";
		      } else if (this.status === 422) { // FORM ERRORS =\
						 var errors = this.response;

						 for (var err in errors) {
							 if (errors.hasOwnProperty(err)) {
								 alertElement.innerHTML += err;
								 alertElement.innerHTML += " ";
								 alertElement.innerHTML += errors[err];
								 alertElement.innerHTML += "<br />";
							 }
						 }
		      } else { // SERVER ERROR
						alertElement.innerHTML += "Server error. We're sorry, but this submission was not successful. The Product Team has been notified.";
	          console.log('failed');
		      }
		  }
			// this.closeDialog();
		},
		ajaxPost: function (form, callback) {
	    var url = form.action;
	    var xhr = new XMLHttpRequest();

			// TODO: Refactor params to be based on the Touchpoint's Form.kind
			//       likely generated server-side
			if(form.getAttribute("data-kind") === "open-ended") {
				var params = {
					body: form.querySelector("#fba-text-body").value,
					authenticity_token: form.querySelector("#authenticity_token").value,
				}
			}

			if(form.getAttribute("data-kind") === "a11") {
				var params = {
					overall_satisfaction: form.querySelector("input[name=overall_satisfaction]:checked").value,
					service_confidence: form.querySelector("input[name=service_confidence]:checked").value,
					service_effectiveness: form.querySelector("input[name=service_effectiveness]:checked").value,
					process_ease: form.querySelector("input[name=process_ease]:checked").value,
					process_efficiency: form.querySelector("input[name=process_efficiency]:checked").value,
					process_transparency: form.querySelector("input[name=process_transparency]:checked").value,
					people_employees: form.querySelector("input[name=people_employees]:checked").value
				}
			}

			if(form.getAttribute("data-kind") === "recruiter") {
				var params = {
					first_name: form.querySelector("#fba-text-name").value,
					last_name: "",
					phone_number: form.querySelector("#fba-text-phone").value,
					email: form.querySelector("#fba-text-email").value,
					authenticity_token: form.querySelector("#authenticity_token").value,
				}
			}

			xhr.open("POST", url);
			xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8;");

			xhr.responseType = 'json';
	    xhr.onload = callback.bind(xhr);
	    xhr.send(JSON.stringify({
				"submission": params,
				authenticity_token: form.querySelector("#authenticity_token").value,
			}));
		}
	};
}( document, window ));

// Set options for tab text, modal title, description, and alert message after submit.
// These will be mapped to named variables in Google Tag Manager.
var tabText = "Help improve this site";
var formTitle = "Do you have a few minutes to help us test this site?";
var formDesc = "Hi! We’re looking for people to participate ";
var buttonLabel = "Send";
var thankYouText = "Thank you";

fba.init({
	'open': tabText,   //'Help improve this site',
	'title': formTitle,    //'Do you have a few minutes to help us test this site?',
	'description': formDesc,   //'Hi! We’re looking for people to participate in a 30 minute phone interview about how they use [agency.gov]. If selected, we’ll contact you to set up a time.',
	'send': buttonLabel,    //'Send',
	'thankyou': thankYouText   //'Thank you - we will be in touch shortly!'
});
