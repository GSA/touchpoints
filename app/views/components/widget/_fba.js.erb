// Form components are namespaced under 'fba' = 'Feedback Analytics'

(function ( d, N ) { 'use strict';
N.fba = {
	css: '<%= escape_javascript(render partial: "components/widget/widget.css", locals: { touchpoint: touchpoint }) %>',

	// enable Javascript experience
	javscriptIsEnabled: function()
	{
		var javascriptDisabledMessage = document.getElementsByClassName("javascript-disabled-message")[0];
		var touchpointForm = document.getElementsByClassName("touchpoint-form")[0];
		if (javascriptDisabledMessage) {
			javascriptDisabledMessage.remove();
		}
		if (touchpointForm) {
			touchpointForm.classList.remove("hide");
		}
	},
	init: function( options )
	{
		this.javscriptIsEnabled();

		this.options = options;
		this.loadCss();
		this.loadHtml();
		<% unless (local_assigns.has_key?(:suppress_ui) && suppress_ui) -%>
			<% if touchpoint.delivery_method == "modal" -%>
				this.loadButton();
			<% end %>
		<% end %>
		this.bindEventListeners();
		this.dialogOpen = false; // initially false
		this.successState = false; // initially false
	},
	bindEventListeners: function()
	{
		var self = this;
		d.addEventListener('keyup', function (event) {
			var x = event.keyCode;
			if( x == 27 && self.dialogOpen == true) {
				self.closeDialog();
			}});
			d.addEventListener('click', function (event) {
				self.handleClick(event);
			});
		},
		loadCss: function()
		{
			d.head.innerHTML += '<style>' + this.css + '</style>';
		},
		loadHtml: function()
		{
			this.dialogEl = document.createElement('div');
			this.dialogEl.style.display = "none";
			this.dialogEl.setAttribute('id', 'fba-modal');
			this.dialogEl.setAttribute('role', 'dialog');

		<%# inject the form interface for inline %>
		<% if touchpoint.delivery_method == "inline" %>
			<% if touchpoint.element_selector? %>
			if(d.getElementById('<%= touchpoint.element_selector %>') != null) {
				d.getElementById('<%= touchpoint.element_selector %>').innerHTML = "<%= escape_javascript render(partial: 'components/widget/modal', locals: { touchpoint: touchpoint }) %>";
				d.body.appendChild(this.dialogEl);
			}
			<% end %>
		<% end %>

		<% if touchpoint.delivery_method != "inline" %>
			<%# inject the form interface for modal and custom-button-modal %>
			this.dialogEl.innerHTML = "<%= escape_javascript render(partial: 'components/widget/modal', locals: { touchpoint: touchpoint }) %>";
			d.body.appendChild(this.dialogEl);

			d.getElementById('fba-modal-close').addEventListener( 'click', this.handleDialogClose, false );
		<% end %>

		<% if touchpoint.delivery_method == "custom-button-modal" %>
			<% if touchpoint.element_selector? %>
			if(d.getElementById('<%= touchpoint.element_selector %>') != null) {
				d.getElementById('<%= touchpoint.element_selector %>').addEventListener( 'click', this.handleButtonClick, false );
			}
			<% end %>
		<% end %>

			d.getElementById('fba-submit').addEventListener( 'click', this.handleSubmitClick, false );
			if (d.getElementById('fba-early-submit')) {
				d.getElementById('fba-early-submit').addEventListener( 'click', this.handleSubmitClick, false );
			}
		},
		resetErrors: function()
		{
			var alertElement = document.querySelector("#fba-alert");
			var alertElementBody = document.getElementsByClassName("usa-alert__text")[0];
			var alertErrorElement = document.querySelector("#fba-alert-error");
			var alertErrorElementBody = alertErrorElement.getElementsByClassName("usa-alert__text")[0];
			alertElement.style.display = "none";
			alertElementBody.innerHTML = "";
			alertErrorElement.style.display = "none";
			alertErrorElementBody.innerHTML = "";
		},
		handleClick: function(e) {
		<% if touchpoint.delivery_method == "modal" %>
			if (N.fba.dialogOpen && !e.target.closest('#fba-button') && !e.target.closest('#fba-modal-dialog')) {
				N.fba.closeDialog();
			}
		<% elsif touchpoint.delivery_method == "custom-button-modal" %>
			if (N.fba.dialogOpen && !e.target.closest('#' + '<%= touchpoint.element_selector %>') && !e.target.closest('#fba-modal-dialog')) {
				N.fba.closeDialog();
			}
		<% end %>
		},
		handleButtonClick: function(e) {
			e.preventDefault();
			N.fba.loadDialog();
		},
		handleDialogClose: function(e) {
			e.preventDefault();
			N.fba.closeDialog();
		},
		handleSubmitClick: function(e) {
			e.preventDefault();
			d.getElementById('fba-submit').disabled = true;
			N.fba.resetErrors();
			N.fba.sendFeedback();
		},
		loadButton: function()
		{
			this.buttonEl = document.createElement('a');
			this.buttonEl.setAttribute('id', 'fba-button');
			this.buttonEl.setAttribute('class', 'fixed-tab-button');
			this.buttonEl.setAttribute('href', '#');
			this.buttonEl.addEventListener( 'click', this.handleButtonClick, false );
			this.buttonEl.innerHTML = this.options.open;
			d.body.appendChild(this.buttonEl);
		},
		// Used when in a modal
		loadDialog: function()
		{
			d.getElementById('fba-modal').style.display = "block";
			this.dialogOpen = true;
		},
		closeDialog: function()
		{
			d.getElementById('fba-modal').style.display = "none";
			this.resetFormDisplay();
			this.dialogOpen = false;
		},
		sendFeedback: function()
		{
			var form = document.getElementById("touchpoints-form");
			this.ajaxPost(form, this.formSuccess);
		},
		showFormSuccess: function(e)
		{
			var alertElement = document.querySelector("#fba-alert");
			var alertElementBody = document.getElementsByClassName("usa-alert__text")[0];

			// Display success Message
			alertElementBody.innerHTML += "<%= @touchpoint.form.success_text %>";
			alertElement.style.display = "block";

			// Hide Form Elements
			if (document.getElementById('touchpoints-form')) {
				// And clear the Form's Fields
				document.getElementById('touchpoints-form').reset();
				if (document.getElementById('touchpoints-form-body')) {
					var formBody = document.getElementById('touchpoints-form-body')
					if(formBody) {
						formBody.style.display = "none";
					}
				}
			}
		},
		resetFormDisplay: function()
		{
			if (fba.successState === false) {
				return false;
			}

			// Hide and Reset Flash Message
			fba.resetErrors();

			// Re-enable Submit Button
			d.getElementById('fba-submit').disabled = false;

			// Show Form Elements
			if (document.getElementById('touchpoints-form')) {
				if (document.getElementById('touchpoints-form-body')) {
					var formBody = document.getElementById('touchpoints-form-body')
					if(formBody) {
						formBody.style.display = "block";
					}
				}
			}
		},
		formSuccess: function(e) {
			// Clear the alert box
			var alertElement = document.querySelector("#fba-alert");
			var alertElementBody = document.getElementsByClassName("usa-alert__text")[0];
			var alertErrorElement = document.querySelector("#fba-alert-error");
			var alertErrorElementBody = alertErrorElement.getElementsByClassName("usa-alert__text")[0];
			alertElementBody.innerHTML = "";
			alertErrorElementBody.innerHTML = "";

			if (this.readyState === 4) {
	      if (this.status === 201) { // SUCCESS!
					fba.successState = true;
					d.getElementById('fba-submit').disabled = true;
					fba.showFormSuccess();
	      } else if (this.status === 422) { // FORM ERRORS =\
						fba.successState = false;
						d.getElementById('fba-submit').disabled = false;
					  var jsonResponse = JSON.parse(this.response);
					  var errors = jsonResponse.messages;

					  for (var err in errors) {
							if (errors.hasOwnProperty(err)) {
								alertErrorElementBody.innerHTML += err;
								alertErrorElementBody.innerHTML += " ";
								alertErrorElementBody.innerHTML += errors[err];
								alertErrorElementBody.innerHTML += "<br />";
							}
					  }
						alertErrorElement.style.display = "block";
				} else { // SERVER ERROR
					console.log('failed');
					alertErrorElement.style.display = "block";
					alertErrorElementBody.innerHTML += "Server error. We're sorry, but this submission was not successful. The Product Team has been notified.";
				}
			}
		},
		ajaxPost: function (form, callback) {
	    var url = form.action;
	    var xhr = new XMLHttpRequest();

			// for each form question
			var params = {
			<%# Dynamically write the Form parameters for Custom Forms %>
			<% @touchpoint.form.questions.each do |question| %>
				<%= question.answer_field %>:
				<%= raw question_type_javascript_params(question) %>,
			<% end %>
			}

			// Combine Referrer and Pathname with Form-specific params
			params["referer"] = d.referrer;
			params["page"] = window.location.pathname;
			params["location_code"] = form.querySelector("#fba_location_code") ? form.querySelector("#fba_location_code").value : null;
			params["language"] = "en";

			// Submit Feedback with a POST
			xhr.open("POST", url);
			xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8;");
	    xhr.onload = callback.bind(xhr);
	    xhr.send(JSON.stringify({
				"submission": params
			}));
		}
	};
}( document, window ));

var tabText = "<%= @touchpoint.form.modal_button_text %>";

fba.init({
	'open': tabText
});

var previousButtons = document.getElementsByClassName("previous-section");
var nextButtons = document.getElementsByClassName("next-section");

for (var i = 0; i < previousButtons.length; i++) {
	previousButtons[i].addEventListener('click', function(e) {
		e.preventDefault();
		var currentPage = this.closest(".section");
		currentPage.classList.remove("visible");
		currentPage.previousElementSibling.classList.add("visible");
		window.scrollTo(0, 0);
	});
}

for (var i = 0; i < nextButtons.length; i++) {
	nextButtons[i].addEventListener('click', function(e) {
		e.preventDefault();
		var currentPage = this.closest(".section");
		currentPage.classList.remove("visible");
		currentPage.nextElementSibling.classList.add("visible");
		window.scrollTo(0, 0);
	});
}
